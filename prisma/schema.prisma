// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model VideoEvent {
  id     String  @id @default(uuid())
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  videoId     String // YouTube video ID
  eventType   String // e.g., "ready", "play", "pause", "ended", "progress"
  currentTime Float?

  createdAt DateTime @default(now())

  @@index([courseId])
  @@index([chapterId])
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum DeliveryMode {
  ONLINE
  IN_PERSON
  HYBRID
}

model Course {
  id     String @id @default(uuid())
  userId String
  user   User   @relation("UserCourses", fields: [userId], references: [id], onDelete: Cascade)

  title       String   @db.Text
  description String?  @db.Text
  imageUrl    String?  @db.Text
  price       Decimal? @db.Decimal(10, 2)
  isPublished Boolean  @default(false)

  deliveryMode DeliveryMode?

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  videoEvents VideoEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  videoEvents  VideoEvent[]

  // New relations for chapter resources
  materials   ChapterMaterial[]
  assignments ChapterAssignment[]
  quizzes     ChapterQuiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// MuxData removed; using YouTube URLs stored directly on Chapter.videoUrl

model UserProgress {
  id     String @id @default(uuid())
  userId String
  user   User   @relation("UserProgress", fields: [userId], references: [id])

  chapterId   String
  chapter     Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String
  user   User   @relation("UserPurchases", fields: [userId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model User {
  id        String  @id @default(uuid()) // Primary key
  clerkId   String  @unique // Clerk's user ID
  email     String  @unique
  firstName String?
  lastName  String?
  imageUrl  String? @db.Text
  role      String? @default("user") // Optional role

  courses        Course[]        @relation("UserCourses")
  purchases      Purchase[]      @relation("UserPurchases")
  userProgress   UserProgress[]  @relation("UserProgress")
  stripeCustomer StripeCustomer?
  videoEvents    VideoEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// This model maps to an existing table that is managed outside Prisma.
/// Marked as ignored so Prisma will not try to drop or migrate it, avoiding data loss.
model Registration {
  id String @id

  @@map("registrations")
  @@ignore
}

// New chapter-level resource models
model ChapterMaterial {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  type      String?  // e.g., image, pdf, slide

  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model ChapterAssignment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text

  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model ChapterQuiz {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text

  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}
